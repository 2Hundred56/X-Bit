// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TILESET_RESOURCES_H_
#define FLATBUFFERS_GENERATED_TILESET_RESOURCES_H_

#include "flatbuffers/flatbuffers.h"

namespace resources {

struct Pixel;

struct Tile;

struct Tileset;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Pixel FLATBUFFERS_FINAL_CLASS {
 private:
  float r_;
  float g_;
  float b_;
  float a_;

 public:
  Pixel() {
    memset(static_cast<void *>(this), 0, sizeof(Pixel));
  }
  Pixel(float _r, float _g, float _b, float _a)
      : r_(flatbuffers::EndianScalar(_r)),
        g_(flatbuffers::EndianScalar(_g)),
        b_(flatbuffers::EndianScalar(_b)),
        a_(flatbuffers::EndianScalar(_a)) {
  }
  float r() const {
    return flatbuffers::EndianScalar(r_);
  }
  float g() const {
    return flatbuffers::EndianScalar(g_);
  }
  float b() const {
    return flatbuffers::EndianScalar(b_);
  }
  float a() const {
    return flatbuffers::EndianScalar(a_);
  }
};
FLATBUFFERS_STRUCT_END(Pixel, 16);

struct Tile FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4,
    VT_WIDTH = 6,
    VT_HEIGHT = 8,
    VT_ID = 10
  };
  const flatbuffers::Vector<uint16_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_DATA);
  }
  uint16_t width() const {
    return GetField<uint16_t>(VT_WIDTH, 0);
  }
  uint16_t height() const {
    return GetField<uint16_t>(VT_HEIGHT, 0);
  }
  uint16_t id() const {
    return GetField<uint16_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyField<uint16_t>(verifier, VT_WIDTH) &&
           VerifyField<uint16_t>(verifier, VT_HEIGHT) &&
           VerifyField<uint16_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct TileBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> data) {
    fbb_.AddOffset(Tile::VT_DATA, data);
  }
  void add_width(uint16_t width) {
    fbb_.AddElement<uint16_t>(Tile::VT_WIDTH, width, 0);
  }
  void add_height(uint16_t height) {
    fbb_.AddElement<uint16_t>(Tile::VT_HEIGHT, height, 0);
  }
  void add_id(uint16_t id) {
    fbb_.AddElement<uint16_t>(Tile::VT_ID, id, 0);
  }
  explicit TileBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TileBuilder &operator=(const TileBuilder &);
  flatbuffers::Offset<Tile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Tile>(end);
    return o;
  }
};

inline flatbuffers::Offset<Tile> CreateTile(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> data = 0,
    uint16_t width = 0,
    uint16_t height = 0,
    uint16_t id = 0) {
  TileBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_id(id);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

inline flatbuffers::Offset<Tile> CreateTileDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint16_t> *data = nullptr,
    uint16_t width = 0,
    uint16_t height = 0,
    uint16_t id = 0) {
  auto data__ = data ? _fbb.CreateVector<uint16_t>(*data) : 0;
  return resources::CreateTile(
      _fbb,
      data__,
      width,
      height,
      id);
}

struct Tileset FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TILES = 4,
    VT_PALETTES = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<resources::Tile>> *tiles() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<resources::Tile>> *>(VT_TILES);
  }
  const flatbuffers::Vector<const resources::Pixel *> *palettes() const {
    return GetPointer<const flatbuffers::Vector<const resources::Pixel *> *>(VT_PALETTES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TILES) &&
           verifier.VerifyVector(tiles()) &&
           verifier.VerifyVectorOfTables(tiles()) &&
           VerifyOffset(verifier, VT_PALETTES) &&
           verifier.VerifyVector(palettes()) &&
           verifier.EndTable();
  }
};

struct TilesetBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_tiles(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<resources::Tile>>> tiles) {
    fbb_.AddOffset(Tileset::VT_TILES, tiles);
  }
  void add_palettes(flatbuffers::Offset<flatbuffers::Vector<const resources::Pixel *>> palettes) {
    fbb_.AddOffset(Tileset::VT_PALETTES, palettes);
  }
  explicit TilesetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TilesetBuilder &operator=(const TilesetBuilder &);
  flatbuffers::Offset<Tileset> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Tileset>(end);
    return o;
  }
};

inline flatbuffers::Offset<Tileset> CreateTileset(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<resources::Tile>>> tiles = 0,
    flatbuffers::Offset<flatbuffers::Vector<const resources::Pixel *>> palettes = 0) {
  TilesetBuilder builder_(_fbb);
  builder_.add_palettes(palettes);
  builder_.add_tiles(tiles);
  return builder_.Finish();
}

inline flatbuffers::Offset<Tileset> CreateTilesetDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<resources::Tile>> *tiles = nullptr,
    const std::vector<resources::Pixel> *palettes = nullptr) {
  auto tiles__ = tiles ? _fbb.CreateVector<flatbuffers::Offset<resources::Tile>>(*tiles) : 0;
  auto palettes__ = palettes ? _fbb.CreateVectorOfStructs<resources::Pixel>(*palettes) : 0;
  return resources::CreateTileset(
      _fbb,
      tiles__,
      palettes__);
}

inline const resources::Tileset *GetTileset(const void *buf) {
  return flatbuffers::GetRoot<resources::Tileset>(buf);
}

inline const resources::Tileset *GetSizePrefixedTileset(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<resources::Tileset>(buf);
}

inline const char *TilesetIdentifier() {
  return "TSET";
}

inline bool TilesetBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, TilesetIdentifier());
}

inline bool VerifyTilesetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<resources::Tileset>(TilesetIdentifier());
}

inline bool VerifySizePrefixedTilesetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<resources::Tileset>(TilesetIdentifier());
}

inline const char *TilesetExtension() {
  return ".xbit";
}

inline void FinishTilesetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<resources::Tileset> root) {
  fbb.Finish(root, TilesetIdentifier());
}

inline void FinishSizePrefixedTilesetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<resources::Tileset> root) {
  fbb.FinishSizePrefixed(root, TilesetIdentifier());
}

}  // namespace resources

#endif  // FLATBUFFERS_GENERATED_TILESET_RESOURCES_H_
